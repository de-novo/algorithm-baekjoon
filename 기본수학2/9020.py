# 골드바흐의 추측 다국어
# 시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
# 2 초	256 MB	50130	21076	16148	40.746%
# 문제
# 1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.

# 골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.

# 2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.

# 입력
# 첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고 짝수 n이 주어진다.

# 출력
# 각 테스트 케이스에 대해서 주어진 n의 골드바흐 파티션을 출력한다. 출력하는 소수는 작은 것부터 먼저 출력하며, 공백으로 구분한다.

# 제한
# 4 ≤ n ≤ 10,000

# 2 3 5 7 11 13 17 19 23 29
# 0 1 2 3  4  5  6  7  8  9

# 4 = 2 2 [0][0] 0 1 
# 6 = 3 3 [1][1] 0 1 2
# 8 = 3 5 [1][2] 0 1 2 3
# 10 = 5 5 [2][2] 0 1 2 3
# 12 = 5 7 [2][3] 0 1 2 3 4 
# 14 = 7 7 [3][3] 0 1 2 3 4 5
# 16 = 5 11 [2][4] 0 1 2 3 4 5
# 18 = 7 11 [3][4] 0 1 2 3 4 5 6
# 20 = 7 13 [3][5] 0 1 2 3 4 5 6 7
# 22 = 11 11 [4][4] 0 1 2 3 4 5 6 7
# 24 = 11 13 [4][5] 0 1 2 3 4 5 6 7 8
# 26 = 13 13 [5][5] 0 1 2 3 4 5 6 7 8
# 28 = 

##################################################
# 풀이 1
# from math import sqrt
# def prime(n):
#     R = int(sqrt(n)+1)
#     if n == 1 | n==0:
#         return False
#     for i in range(2,R):
#         if n%i==0:
#             return False
#     return True



# N = int(input())


# for i in range(N):
   
#     I = int(input())
  
#     D = I//2 
    
#     while 1 :
#         C = I-D
#         if prime(D):
#             if prime(C):
#                 print(C, D)
#                 break
#         D+=1    
##################################################
# 풀이 2
import sys
from math import sqrt
N =int(sys.stdin.readline())

inputList=[]

for i in range(N):
    inputList.append(int(sys.stdin.readline()))

Max = max(inputList)

P = [True]*Max
R = int(sqrt(Max)+1)

for i in range(2,R):
    if P[i]==True:
        for x in range(i+i,Max,i):
            P[x]=False

for i in inputList:
    D=i//2
    while 1:
        C = i-D
        if P[D]:
            if P[C]:
                print(C, D)
                break
        D+=1
        
